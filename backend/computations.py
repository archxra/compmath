import numpy as np
import matplotlib.pyplot as plt
import matplotlib
matplotlib.use('Agg')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑ GUI
import base64
import io
from io import BytesIO
from scipy.interpolate import CubicSpline
from sympy import symbols, Function, diff, Eq, solve as sym_solve

def solve(task_id, params):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ (–¥–ª—è –º–µ—Ç–æ–¥–æ–≤, –æ—Ç–ª–∏—á–Ω—ã—Ö –æ—Ç 1)."""
    methods = {
        2: find_roots,
        3: relaxation_method,
        4: power_method,
        5: exponential_fit,
        6: cubic_spline,
        7: picard_method,
        8: simpsons_rule
    }
    if task_id in methods:
        return format_result(methods[task_id](params))
    return {"error": "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏"}

def format_result(result):
    """–ü—Ä–∏–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫ user-friendly –≤–∏–¥—É."""
    if isinstance(result, float):
        return round(result, 6)
    elif isinstance(result, list):
        return [round(num, 6) if isinstance(num, (int, float)) else num for num in result]
    elif isinstance(result, dict):
        # –ù–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫ ‚Äì –æ–Ω —É–∂–µ —Å—Ç—Ä–æ–∫–∞
        formatted = {}
        for key, value in result.items():
            if key == "graph":
                formatted[key] = value
            else:
                formatted[key] = format_result(value)
        return formatted
    return result

def plot_graph():
    """–°—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ–∏–∫ —Ñ—É–Ω–∫—Ü–∏–∏ y = x^2."""
    x = range(-10, 11)
    y = [i ** 2 for i in x]

    plt.figure()
    plt.plot(x, y, label="y = x^2", color="blue")
    plt.xlabel("x")
    plt.ylabel("y")
    plt.title("–ì—Ä–∞—Ñ–∏–∫ —Ñ—É–Ω–∫—Ü–∏–∏ y = x¬≤")
    plt.axhline(0, color='black', linewidth=0.5)
    plt.legend()
    plt.grid()

    img = io.BytesIO()
    plt.savefig(img, format='png', bbox_inches="tight")
    img.seek(0)
    
    img_str = base64.b64encode(img.getvalue()).decode()
    print("üì∏ –ü–æ–ª–Ω—ã–π Base64 –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π (Plot Graph):", img_str[:100])
    return {"graph": img_str}

def find_roots(params):
    """–ù–∞—Ö–æ–¥–∏—Ç –∫–æ—Ä–Ω–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏—è ax¬≤ + bx + c = 0 –∏ —Å—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ–∏–∫ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –æ—Ç–º–µ—á–µ–Ω–Ω—ã–º–∏ –∫–æ—Ä–Ω—è–º–∏."""
    a = float(params.get('coeffA', 1))
    b = float(params.get('coeffB', 0))
    c = float(params.get('coeffC', 0))

    discriminant = b**2 - 4*a*c
    print(f"üìå –î–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç: {discriminant}")
    if discriminant < 0:
        return {"roots": "–ö–æ—Ä–Ω–µ–π –Ω–µ—Ç (–¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç < 0)", "graph": ""}
    
    root1 = (-b + np.sqrt(discriminant)) / (2*a)
    root2 = (-b - np.sqrt(discriminant)) / (2*a)
    roots = [root1, root2] if root1 != root2 else [root1]
    
    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ ax¬≤+bx+c —Å –æ—Ç–º–µ—á–µ–Ω–Ω—ã–º–∏ –∫–æ—Ä–Ω—è–º–∏
    x_min = min(roots) - 5
    x_max = max(roots) + 5
    x_vals = np.linspace(x_min, x_max, 400)
    y_vals = a * x_vals**2 + b * x_vals + c
    plt.figure()
    plt.plot(x_vals, y_vals, label=f"{a}x¬≤ + {b}x + {c}", color="green")
    plt.axhline(0, color='black', linewidth=0.5)
    for r in roots:
        plt.plot(r, 0, "ro", markersize=8)
    plt.xlabel("x")
    plt.ylabel("f(x)")
    plt.title("–ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–π –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è")
    plt.legend()
    plt.grid()
    img = io.BytesIO()
    plt.savefig(img, format='png', bbox_inches="tight")
    img.seek(0)
    graph_str = base64.b64encode(img.getvalue()).decode()
    result = {"roots": roots, "graph": graph_str}
    print(f"üì¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç (Find Roots): {result}")
    return result

def relaxation_method(params):
    """–ú–µ—Ç–æ–¥ —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —É—Ä–∞–≤–Ω–µ–Ω–∏—è x = f(x) —Å –≥—Ä–∞—Ñ–∏–∫–æ–º —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
       –ï—Å–ª–∏ –∑–∞–¥–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä omega, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–æ—Ä–º—É–ª–∞: x_next = œâ¬∑f(x) + (1-œâ)¬∑x"""
    x0 = float(params.get('x0', 0))
    tol = float(params.get('tol', 1e-6))
    max_iter = int(params.get('max_iter', 100))
    omega = float(params.get('omega', 1))  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é œâ = 1 (—Ç–æ –µ—Å—Ç—å –º–µ—Ç–æ–¥ –ø—Ä–æ—Å—Ç—ã—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π)
    
    # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: f(x) = cos(x)
    def f(x): 
        return np.cos(x)
    
    iterations_list = [x0]
    x = x0
    count = 0
    while count < max_iter:
        # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–æ œâ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º—É–ª—É —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏:
        x_next = omega * f(x) + (1 - omega) * x
        iterations_list.append(x_next)
        if abs(x_next - x) < tol:
            break
        x = x_next
        count += 1

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    plt.figure()
    plt.plot(iterations_list, "o-", color="purple")
    plt.xlabel("Iteration")
    plt.ylabel("x")
    plt.title("Convergence of Relaxation Method")
    plt.grid()
    img = io.BytesIO()
    plt.savefig(img, format='png', bbox_inches="tight")
    img.seek(0)
    graph_str = base64.b64encode(img.getvalue()).decode()
    return {"solution": iterations_list[-1], "iterations": count, "iteration_values": iterations_list, "graph": graph_str}

def power_method(params):
    """–ú–µ—Ç–æ–¥ —Å—Ç–µ–ø–µ–Ω–Ω–æ–≥–æ –∏—Ç–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Å –≥—Ä–∞—Ñ–∏–∫–æ–º —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
    A = np.array([[float(params['a11']), float(params['a12'])],
                  [float(params['a21']), float(params['a22'])]])
    x = np.array([1, 1], dtype=float)
    tol = float(params.get('tol', 1e-6))
    max_iter = int(params.get('max_iter', 100))
    convergence = [x.copy()]
    for i in range(max_iter):
        x_new = np.dot(A, x)
        lambda_approx = max(abs(x_new))
        x_new /= lambda_approx
        convergence.append(x_new.copy())
        if np.linalg.norm(x_new - x) < tol:
            differences = [np.linalg.norm(convergence[j+1]-convergence[j]) for j in range(len(convergence)-1)]
            plt.figure()
            plt.plot(range(len(differences)), differences, "o-", color="orange")
            plt.xlabel("–ù–æ–º–µ—Ä –∏—Ç–µ—Ä–∞—Ü–∏–∏")
            plt.ylabel("–ù–æ—Ä–º–∞ —Ä–∞–∑–Ω–∏—Ü—ã")
            plt.title("–°—Ö–æ–¥–∏–º–æ—Å—Ç—å –º–µ—Ç–æ–¥–∞ —Å—Ç–µ–ø–µ–Ω–Ω—ã—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π")
            plt.grid()
            img = io.BytesIO()
            plt.savefig(img, format='png', bbox_inches="tight")
            img.seek(0)
            graph_str = base64.b64encode(img.getvalue()).decode()
            return {"eigenvalue": lambda_approx, "eigenvector": x_new.tolist(), "iterations": i, "graph": graph_str}
        x = x_new
    return {"error": "–ú–µ—Ç–æ–¥ –Ω–µ —Å–æ—à–µ–ª—Å—è"}

def exponential_fit(params):
    """–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è y = a * exp(b * x) —Å –≥—Ä–∞—Ñ–∏–∫–æ–º –ø–æ–¥–≥–æ–Ω–∫–∏."""
    try:
        x_values = np.array([float(x) for x in params.get('x_values', '').split(',')])
        y_values = np.array([float(y) for y in params.get('y_values', '').split(',')])
    except Exception as e:
        return {"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞–ø—è—Ç—ã–µ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —á–∏—Å–µ–ª."}

    if len(x_values) != len(y_values) or len(x_values) < 2:
        return {"error": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏–∏"}
    
    coefficients = np.polyfit(x_values, np.log(y_values), 1)
    a = np.exp(coefficients[1])
    b = coefficients[0]
    
    x_fit = np.linspace(min(x_values), max(x_values), 200)
    y_fit = a * np.exp(b * x_fit)
    plt.figure()
    plt.plot(x_values, y_values, "bo", label="–ò—Å—Ö–æ–¥–Ω—ã–µ —Ç–æ—á–∫–∏")
    plt.plot(x_fit, y_fit, "r-", label=f"–ê–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è: y={a:.4f}*exp({b:.4f}x)")
    plt.xlabel("x")
    plt.ylabel("y")
    plt.title("–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è")
    plt.legend()
    plt.grid()
    img = io.BytesIO()
    plt.savefig(img, format='png', bbox_inches="tight")
    img.seek(0)
    graph_str = base64.b64encode(img.getvalue()).decode()
    return {"a": a, "b": b, "equation": f"y = {a:.4f} * e^({b:.4f}x)", "graph": graph_str}

def cubic_spline(params):
    """–ö—É–±–∏—á–µ—Å–∫–∏–π —Å–ø–ª–∞–π–Ω-–∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è —Å –≥—Ä–∞—Ñ–∏–∫–æ–º –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏."""
    try:
        x_values = np.array([float(x) for x in params.get('x_values', '').split(',')])
        y_values = np.array([float(y) for y in params.get('y_values', '').split(',')])
    except Exception as e:
        return {"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞–ø—è—Ç—ã–µ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —á–∏—Å–µ–ª."}
    
    if len(x_values) != len(y_values) or len(x_values) < 2:
        return {"error": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ—á–µ–∫ –¥–ª—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏"}
    
    cs = CubicSpline(x_values, y_values)
    x_dense = np.linspace(min(x_values), max(x_values), 200)
    y_dense = cs(x_dense)
    plt.figure()
    plt.plot(x_values, y_values, "bo", label="–ò—Å—Ö–æ–¥–Ω—ã–µ —Ç–æ—á–∫–∏")
    plt.plot(x_dense, y_dense, "r-", label="–°–ø–ª–∞–π–Ω")
    plt.xlabel("x")
    plt.ylabel("y")
    plt.title("–ö—É–±–∏—á–µ—Å–∫–∞—è —Å–ø–ª–∞–π–Ω-–∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è")
    plt.legend()
    plt.grid()
    img = io.BytesIO()
    plt.savefig(img, format='png', bbox_inches="tight")
    img.seek(0)
    graph_str = base64.b64encode(img.getvalue()).decode()
    return {"spline_coeffs": cs.c.tolist(), "spline_function": "–ì–æ—Ç–æ–≤–æ", "graph": graph_str}

def picard_method(params):
    """–ú–µ—Ç–æ–¥ –ü–∏–∫–∞—Ä–∞ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π.
       –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∏—Ç–µ—Ä–∞—Ü–∏–π (–≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–π)."""
    x_val = float(params.get('x', 0.2))
    x = symbols('x')
    y = Function('y')(x)
    f = x + y
    approximations = [1]
    
    for _ in range(4):
        y_new = 1 + diff(f, x)
        approximations.append(str(y_new))
    
    return {"approximations": approximations, f"y({x_val})": approximations[-1]}

def simpsons_rule(params):
    """–ú–µ—Ç–æ–¥ –°–∏–º–ø—Å–æ–Ω–∞ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∞–ª–∞ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º —Ä–∞–∑–±–∏–µ–Ω–∏—è."""
    try:
        x_values = np.array([float(x) for x in params.get('x_values', '').split(',')])
        f_values = np.array([float(v) for v in params.get('f_values', '').split(',')])
    except Exception as e:
        return {"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞–ø—è—Ç—ã–µ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —á–∏—Å–µ–ª."}
    
    if len(f_values) < 3 or len(f_values) % 2 == 0:
        return {"error": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ—á–µ—Ç–Ω—ã–º"}
    
    h = (x_values[-1] - x_values[0]) / (len(x_values) - 1)
    integral = (h / 3) * (f_values[0] + 4 * sum(f_values[1:-1:2]) + 2 * sum(f_values[2:-2:2]) + f_values[-1])
    
    plt.figure()
    plt.plot(x_values, f_values, "bo-", label="f(x)")
    plt.fill_between(x_values, f_values, color="lightblue", alpha=0.5)
    plt.xlabel("x")
    plt.ylabel("f(x)")
    plt.title("–ú–µ—Ç–æ–¥ –°–∏–º–ø—Å–æ–Ω–∞")
    plt.legend()
    plt.grid()
    img = io.BytesIO()
    plt.savefig(img, format='png', bbox_inches="tight")
    img.seek(0)
    graph_str = base64.b64encode(img.getvalue()).decode()
    
    return {"integral": integral, "formatted": f"‚à´ f(x) dx ‚âà {integral:.6f}", "graph": graph_str}
